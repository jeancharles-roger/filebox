#summary Services and Extension mechanism
#labels globals,module,service,extension,plugin,plugin,plug-in,library,dynamic

= Globals =
The aim of the services in filebox is to allow the extensions to access to objects that can be extended. To do so, we will provide a class named *Globals* that shares these objects.

Sample:
{{{
MenuManager menuBar = Globals.get("menuBar",MenuManager.class);
}}}
We can specialize Globals with for instance FileboxGlobals with some application's specific methods.
{{{
MenuManager menuBar = FileboxGlobals.getMenuBar();
}}}

= Modules =

A module aims to provide new functionality to the core application. To define it we have to implement Module interface and declare it in a Manifest. 

Modules are packaged into jar files, one jar file can contains several modules.
While starting the core application, modules are loaded in the order defined by a scheduler interface. This interface provides a priority number for each module.
{{{
interface Module {
   boolean start();
   void stop();
}
}}}
{{{
interface ModuleScheduler {
   int getPriority(String jarFile, String moduleClassName);
   int getPriority(File jarFile, Class<? extends Module> moduleClass);
}
}}}